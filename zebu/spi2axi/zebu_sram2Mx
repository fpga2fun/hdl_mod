//----------------------------------------------------------------------
// COPYRIGHT (C) SYNOPSYS INC.
// This software and the associated documentation are confidential and
// proprietary to Synopsys, Inc. Your use or disclosure of this software
// is subject to the terms and conditions of a written license agreement
// between you, or your company, and Synopsys, Inc. In the event of
// publications, the following notice is applicable:
//
// ALL RIGHTS RESERVED
//
// The entire notice above must be reproduced on all authorized copies.
//----------------------------------------------------------------------

module zebu_sram2Mx #( DATA_WIDTH = 64) (
   DI
  ,DO
  ,ADDR
  ,WE
  ,ME
  ,BW
  ,CLK
);

  input  [ DATA_WIDTH-1:0] DI;
  output [ DATA_WIDTH-1:0] DO;
  input  [ 20:  0] ADDR;
  input            WE;
  input            ME;
  input  [ (DATA_WIDTH/8) -1: 0] BW;
  input            CLK;




  reg /*sparse*/ [ DATA_WIDTH-1:0] mem [0:65536];

  reg [ DATA_WIDTH-1 :0] DO_reg0;
  assign DO = DO_reg0;


  reg [ DATA_WIDTH-1 :0] maskportA;

  always @ ( posedge CLK ) begin

    //-------- Mask (port portA)
        //maskportA = ( {  {8{BW[3]}}, {8{BW[2]}}, {8{BW[1]}}, {8{BW[0]}} }  );
   for(int i = 0; i < DATA_WIDTH/8; i++)
      maskportA[ i*8 +: 8] = ( {8{BW[i]}}  );

    //-------- Write (port portA)
    if ( ME && WE ) begin
      mem[ADDR] <= (DI & maskportA) | (mem[ADDR] & ~maskportA);
    end

    //-------- Read (port portA)
    if ( ME ) begin
      DO_reg0 <= mem[ADDR];
    end
  end




endmodule
